name: CI
on:
  pull_request:
    branches: [ main ]

jobs:
  python-fixtures:
    name: Python fixtures + checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Bash script syntax check
        run: bash -n scripts/*.sh
      - name: Run Python script compile test
        run: |
          pip install pytest
          pytest -q tests/test_scripts_compile.py
      - name: Generate fixtures
        run: |
          python scripts/gen_fixtures.py -n 8 16
          python scripts/gen_signal_fixtures.py
          python scripts/gen_optimize_fixtures.py
          python scripts/gen_linalg_fixtures.py
      - name: Upload fixtures
        uses: actions/upload-artifact@v4
        with:
          name: scir-fixtures
          path: fixtures/**

  rust-tests:
    name: Rust tests (matrix)
    runs-on: ${{ matrix.os }}
    needs: python-fixtures
    permissions:
      contents: read
      id-token: write
    env:
      # Improve sccache effectiveness and avoid incremental artifacts
      CARGO_INCREMENTAL: 0
      # Enable GHA cache backend when supported by sccache (falls back to disk otherwise)
      SCCACHE_GHA_ENABLED: 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Determine host triple (Unix)
        id: host_unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          triple=$(rustc -vV | sed -n 's/^host: //p')
          echo "triple=$triple" >> $GITHUB_OUTPUT
      - name: Determine host triple (Windows)
        id: host_win
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $triple = (& rustc -vV) -split "`n" | Where-Object { $_ -like 'host: *' } | ForEach-Object { ($_ -split ':')[1].Trim() }
          "triple=$triple" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Configure AWS credentials (OIDC)
        env:
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          SCCACHE_REGION: ${{ secrets.SCCACHE_REGION }}
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' && env.SCCACHE_REGION != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.SCCACHE_REGION }}
      - name: Install sccache (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y sccache
      - name: Install sccache (macOS)
        if: matrix.os == 'macos-latest'
        run: brew update && brew install sccache
      - name: Install sccache (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: choco install sccache -y
      - name: Setup sccache env (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_S3_KEY_PREFIX=/scir/${{ steps.host_unix.outputs.triple }}" >> $GITHUB_ENV
          # Enable S3 backend only if credentials and bucket/region are present; else use local disk cache
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] \
             && [ -n "${{ secrets.SCCACHE_BUCKET }}" ] && [ -n "${{ secrets.SCCACHE_REGION }}" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "SCCACHE_BUCKET=${{ secrets.SCCACHE_BUCKET }}" >> $GITHUB_ENV
            echo "SCCACHE_REGION=${{ secrets.SCCACHE_REGION }}" >> $GITHUB_ENV
          else
            # Use stable per-OS cache dir for Actions cache
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              echo "SCCACHE_DIR=$HOME/Library/Caches/Mozilla.sccache" >> $GITHUB_ENV
              mkdir -p "$HOME/Library/Caches/Mozilla.sccache"
            else
              echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV
              mkdir -p "$HOME/.cache/sccache"
            fi
            echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV
          fi
      - name: Setup sccache env (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          "RUSTC_WRAPPER=sccache" | Out-File -FilePath $env:GITHUB_ENV -Append
          "SCCACHE_S3_KEY_PREFIX=/scir/${{ steps.host_win.outputs.triple }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          # Enable S3 backend only if credentials and bucket/region are present; else use local disk cache
          if ('${{ secrets.AWS_ACCESS_KEY_ID }}' -ne '' -and '${{ secrets.AWS_SECRET_ACCESS_KEY }}' -ne '' -and '${{ secrets.SCCACHE_BUCKET }}' -ne '' -and '${{ secrets.SCCACHE_REGION }}' -ne '') {
            "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
            "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | Out-File -FilePath $env:GITHUB_ENV -Append
            "SCCACHE_BUCKET=${{ secrets.SCCACHE_BUCKET }}" | Out-File -FilePath $env:GITHUB_ENV -Append
            "SCCACHE_REGION=${{ secrets.SCCACHE_REGION }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            # Use stable per-OS cache dir for Actions cache
            $localCache = "$env:LOCALAPPDATA\\Mozilla\\sccache"
            New-Item -ItemType Directory -Force -Path $localCache | Out-Null
            "SCCACHE_DIR=$localCache" | Out-File -FilePath $env:GITHUB_ENV -Append
            "SCCACHE_CACHE_SIZE=5G" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
      - name: Start sccache server
        run: sccache --start-server || true
      - name: Warm sccache (quick check)
        shell: bash
        env:
          CARGO_TARGET_DIR: target-warm
        run: |
          # Build a couple of small crates to populate cache (use build to exercise codegen)
          cargo build -p scir-core -p scir-nd -p scir-fft -q || true
      - name: Cache sccache dir (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ steps.host_unix.outputs.triple }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ steps.host_unix.outputs.triple }}-
      - name: Cache sccache dir (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: sccache-${{ steps.host_unix.outputs.triple }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ steps.host_unix.outputs.triple }}-
      - name: Cache sccache dir (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: $LOCALAPPDATA\Mozilla\sccache
          key: sccache-${{ steps.host_win.outputs.triple }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ steps.host_win.outputs.triple }}-
      - name: Show sccache backend
        if: always()
        shell: bash
        run: |
          echo "SCCACHE_BUCKET=${SCCACHE_BUCKET:-unset}"
          echo "SCCACHE_REGION=${SCCACHE_REGION:-unset}"
          echo "SCCACHE_DIR=${SCCACHE_DIR:-unset}"
          sccache --show-stats || true
      - uses: Swatinem/rust-cache@v2
      - name: Download fixtures
        uses: actions/download-artifact@v4
        with:
          name: scir-fixtures
          path: fixtures
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy workspace (all OS, exclude linalg)
        env:
          CARGO_TARGET_DIR: target-ws
        run: cargo clippy --workspace --all-targets --exclude scir-linalg -- -D warnings
      - name: Docs (publishable crates)
        if: matrix.os == 'ubuntu-latest'
        env:
          RUSTDOCFLAGS: -D warnings -D missing-docs -D rustdoc::broken_intra_doc_links -D rustdoc::bare_urls
        run: |
          cargo doc -p scir-core -p scir-nd -p scir-fft -p scir-signal -p scir-optimize -p scir-gpu -p scir --no-deps
      - name: Clippy scir-linalg (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-linux
        run: cargo clippy --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" -- -D warnings
      - name: Clippy scir-linalg (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-macos
        run: cargo clippy --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "faer" -- -D warnings
      # Skip linalg on Windows to avoid heavy OpenBLAS builds
      - name: Build + Test core crates (no BLAS) [Unix shells]
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          CARGO_TARGET_DIR: target-core
        run: |
          for pkg in scir-core scir-nd scir-fft scir-signal scir-optimize; do \
            echo "::group::build $pkg"; cargo build -p $pkg --verbose; echo "::endgroup::"; \
            echo "::group::test  $pkg"; cargo test  -p $pkg --verbose; echo "::endgroup::"; \
          done
      - name: Build + Test core crates (no BLAS) [Windows]
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          CARGO_TARGET_DIR: target-core
        run: |
          $packages = @('scir-core','scir-nd','scir-fft','scir-signal','scir-optimize')
          foreach ($pkg in $packages) {
            Write-Host "::group::build $pkg"
            cargo build -p $pkg --verbose
            Write-Host "::endgroup::"
            Write-Host "::group::test  $pkg"
            cargo test  -p $pkg --verbose
            Write-Host "::endgroup::"
          }
      - name: Build + Test scir-linalg (Linux, OpenBLAS static)
        if: matrix.os == 'ubuntu-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-linux
        run: |
          cargo build --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" --verbose
          cargo test  --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" --verbose
      - name: Build scir-linalg (macOS, faer)
        if: matrix.os == 'macos-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-macos
        run: cargo build --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "faer" --verbose
      # No Windows linalg build/test
      - name: sccache stats
        if: always()
        run: sccache --show-stats || true

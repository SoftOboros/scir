name: CI
on:
  push:
  pull_request:

jobs:
  python-fixtures:
    name: Python fixtures + checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Bash script syntax check
        run: bash -n scripts/*.sh
      - name: Run Python script compile test
        run: |
          pip install pytest
          pytest -q tests/test_scripts_compile.py
      - name: Generate fixtures
        run: |
          python scripts/gen_fixtures.py -n 8 16
          python scripts/gen_signal_fixtures.py
          python scripts/gen_optimize_fixtures.py
          python scripts/gen_linalg_fixtures.py
      - name: Upload fixtures
        uses: actions/upload-artifact@v4
        with:
          name: scir-fixtures
          path: fixtures/**

  rust-tests:
    name: Rust tests (matrix)
    runs-on: ${{ matrix.os }}
    needs: python-fixtures
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: johnwason/vcpkg-action@v7
        with:
          pkgs: openblas
          triplet: x64-windows
          token: ${{ github.token }}
          extra-args: --clean-after-build
      - name: Configure vcpkg env (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "VCPKGRS_DYNAMIC=1" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
          # Export VCPKG_ROOT for crates expecting this var (openblas-src)
          echo "VCPKG_ROOT=${VCPKG_INSTALLATION_ROOT}" >> $GITHUB_ENV
      - name: Download fixtures
        uses: actions/download-artifact@v4
        with:
          name: scir-fixtures
          path: fixtures
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy workspace (all OS, exclude linalg)
        env:
          CARGO_TARGET_DIR: target-ws
        run: cargo clippy --workspace --all-targets --exclude scir-linalg -- -D warnings
      - name: Clippy scir-linalg (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-linux
        run: cargo clippy --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" -- -D warnings
      - name: Clippy scir-linalg (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-macos
        run: cargo clippy --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "faer" -- -D warnings
      - name: Clippy scir-linalg (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-windows
        run: cargo clippy --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,windows-openblas" -- -D warnings
      - name: Build + Test core crates (no BLAS)
        env:
          CARGO_TARGET_DIR: target-core
        run: |
          for pkg in scir-core scir-nd scir-fft scir-signal scir-optimize; do \
            echo "::group::build $pkg"; cargo build -p $pkg --verbose; echo "::endgroup::"; \
            echo "::group::test  $pkg"; cargo test  -p $pkg --verbose; echo "::endgroup::"; \
          done
      - name: Build + Test scir-linalg (Linux, OpenBLAS static)
        if: matrix.os == 'ubuntu-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-linux
        run: |
          cargo build --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" --verbose
          cargo test  --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,linux-blas" --verbose
      - name: Build scir-linalg (macOS, faer)
        if: matrix.os == 'macos-latest'
        env:
          CARGO_TARGET_DIR: target-linalg-macos
        run: cargo build --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "faer" --verbose
      - name: Build + Test scir-linalg (Windows, OpenBLAS via vcpkg)
        if: matrix.os == 'windows-latest'
        shell: bash
        env:
          CARGO_TARGET_DIR: target-linalg-windows
        run: |
          cargo build --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,windows-openblas" --verbose
          cargo test  --manifest-path crates/scir-linalg/Cargo.toml -p scir-linalg --features "blas,windows-openblas" --verbose
